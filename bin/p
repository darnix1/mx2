#!/usr/bin/env python3
import os
import sys
import subprocess
from datetime import datetime, timedelta
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.layout import Layout
from rich.text import Text
from rich.box import ROUNDED

# Configurar consola Rich
console = Console()

# Estilos
STYLE_TITLE = "bold bright_white on dark_blue"
STYLE_HEADER = "bold bright_white"
STYLE_OPTION = "bright_yellow"
STYLE_VALUE = "bright_white"
STYLE_ON = "bright_green"
STYLE_OFF = "bright_red"

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def get_system_info():
    """Obtiene información del sistema"""
    def run_cmd(cmd):
        try:
            return subprocess.run(cmd, shell=True, check=True, 
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                text=True).stdout.strip()
        except:
            return ""

    info = {}
    info['os'] = run_cmd("cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '\"'")
    info['domain'] = run_cmd("cat /etc/xray/domain 2>/dev/null") or "No configurado"
    info['ip'] = run_cmd("curl -s ifconfig.me") or "No disponible"
    
    mem = run_cmd("free -m | awk 'NR==2 {print $2 \" \" $3}'").split()
    info['ram_total'] = f"{int(mem[0])}MB" if len(mem) > 0 else "0MB"
    info['ram_used'] = f"{int(mem[1])}MB" if len(mem) > 1 else "0MB"
    
    info['isp'] = run_cmd("cat /etc/xray/isp 2>/dev/null") or "Desconocido"
    info['city'] = run_cmd("cat /etc/xray/city 2>/dev/null") or "Desconocida"
    info['author'] = run_cmd("cat /etc/profil 2>/dev/null") or "Desconocido"
    
    # Estado de servicios
    def is_service_active(service):
        return "ON" if run_cmd(f"systemctl is-active {service}") == "active" else "OFF"
    
    info['ssh_status'] = is_service_active("ws-stunnel")
    info['xray_status'] = is_service_active("xray")
    info['nginx_status'] = is_service_active("nginx")
    
    # Conteo de usuarios
    def count_users(pattern, file):
        if os.path.exists(file):
            return len([line for line in open(file) if line.startswith(pattern)])
        return 0
    
    info['ssh_users'] = count_users("### ", "/etc/xray/ssh")
    info['vmess_users'] = count_users("#vmg ", "/etc/xray/config.json")
    info['vless_users'] = count_users("#vlg ", "/etc/xray/config.json")
    info['trojan_users'] = count_users("#trg ", "/etc/xray/config.json")
    
    return info

def create_menu_layout(info):
    """Crea el diseño del menú principal"""
    layout = Layout()
    
    # 1. Encabezado
    header = Panel(
        Text(" MENÚ PRINCIPAL ", justify="center"), 
        style=STYLE_TITLE,
        box=ROUNDED
    )
    
    # 2. Información del sistema
    sys_info = Table.grid(padding=(0, 2))
    sys_info.add_column(style=STYLE_OPTION, width=15)
    sys_info.add_column(style=STYLE_VALUE)
    
    sys_info.add_row("Sistema Operativo", info['os'])
    sys_info.add_row("Dominio", info['domain'])
    sys_info.add_row("IP Pública", info['ip'])
    sys_info.add_row("RAM", f"{info['ram_used']} / {info['ram_total']}")
    sys_info.add_row("Ubicación", f"{info['city']} ({info['isp']})")
    sys_info.add_row("Autor", info['author'])
    
    sys_panel = Panel(
        sys_info,
        title="[bold]INFORMACIÓN DEL SISTEMA[/]",
        border_style="blue",
        box=ROUNDED
    )
    
    # 3. Estado de servicios
    services = Table.grid(padding=(0, 2))
    services.add_row(
        f"SSHWS: [{STYLE_ON if info['ssh_status'] == 'ON' else STYLE_OFF}]{info['ssh_status']}[/]",
        f"XRAY: [{STYLE_ON if info['xray_status'] == 'ON' else STYLE_OFF}]{info['xray_status']}[/]",
        f"NGINX: [{STYLE_ON if info['nginx_status'] == 'ON' else STYLE_OFF}]{info['nginx_status']}[/]"
    )
    
    services_panel = Panel(
        Align.center(services),
        title="[bold]ESTADO DE SERVICIOS[/]",
        border_style="blue",
        box=ROUNDED
    )
    
    # 4. Usuarios registrados
    users = Table(
        show_header=True,
        header_style="bold bright_white",
        box=ROUNDED,
        expand=True
    )
    users.add_column("Servicio", style="bright_white", justify="center")
    users.add_column("Usuarios", style="bright_green", justify="center")
    
    users.add_row("SSH", str(info['ssh_users']))
    users.add_row("VMESS", str(info['vmess_users']))
    users.add_row("VLESS", str(info['vless_users']))
    users.add_row("TROJAN", str(info['trojan_users']))
    
    users_panel = Panel(
        users,
        title="[bold]USUARIOS REGISTRADOS[/]",
        border_style="blue",
        box=ROUNDED
    )
    
    # 5. Opciones del menú
    menu_table = Table.grid(padding=(0, 2), expand=True)
    menu_table.add_column(width=15)
    menu_table.add_column(width=30)
    menu_table.add_column(width=15)
    menu_table.add_column(width=30)
    
    menu_table.add_row(
        f"[{STYLE_OPTION}]1[/]. SSH/OpenVPN",
        "Administración de usuarios SSH",
        f"[{STYLE_OPTION}]7[/]. NotiBot",
        "Configuración de notificaciones"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]2[/]. Xray/VMESS",
        "Configuración VMESS",
        f"[{STYLE_OPTION}]8[/]. Temas",
        "Personalizar interfaz"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]3[/]. Xray/VLESS",
        "Configuración VLESS",
        f"[{STYLE_OPTION}]9[/]. Actualizar",
        "Actualizar scripts"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]4[/]. Trojan",
        "Configuración Trojan",
        f"[{STYLE_OPTION}]10[/]. Sistema",
        "Configuración del sistema"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]5[/]. Servicios",
        "Gestión de servicios",
        f"[{STYLE_OPTION}]11[/]. Backup",
        "Copias de seguridad"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]6[/]. Telegram Bot",
        "Configuración del bot",
        f"[{STYLE_OPTION}]12[/]. Reiniciar",
        "Reiniciar servicios"
    )
    
    menu_panel = Panel(
        menu_table,
        title="[bold]OPCIONES DEL MENÚ[/]",
        border_style="blue",
        box=ROUNDED
    )
    
    # Construir layout completo
    layout.split(
        Layout(header, name="header", size=3),
        Layout(sys_panel, name="sys_info"),
        Layout(services_panel, name="services", size=3),
        Layout(users_panel, name="users", size=5),
        Layout(menu_panel, name="menu")
    )
    
    return layout

def main_menu():
    """Muestra el menú principal"""
    clear_screen()
    info = get_system_info()
    layout = create_menu_layout(info)
    
    console.print(layout)
    
    # Input para selección
    console.print("\n")
    try:
        opt = console.input("[bright_white]Seleccione una opción: [/][bright_green]").strip()
        
        # Manejo de opciones
        if opt in ["1", "01"]:
            os.system("m-sshovpn")
        elif opt in ["2", "02"]:
            os.system("m-vmess")
        elif opt in ["3", "03"]:
            os.system("m-vless")
        elif opt in ["4", "04"]:
            os.system("m-trojan")
        elif opt in ["5", "05"]:
            os.system("running")
        elif opt in ["6", "06"]:
            os.system("m-bot")
        elif opt in ["7", "07"]:
            os.system("m-bot2")
        elif opt in ["8", "08"]:
            os.system("m-theme")
        elif opt in ["9", "09"]:
            os.system("m-update")
        elif opt == "10":
            os.system("m-system")
        elif opt == "11":
            os.system("m-backup")
        elif opt == "12":
            os.system("m-restart")
        else:
            main_menu()
            
    except KeyboardInterrupt:
        console.print("\n[bright_red]Saliendo...[/]")
        sys.exit(0)

if __name__ == "__main__":
    try:
        while True:
            main_menu()
    except Exception as e:
        console.print(f"[bright_red]Error: {str(e)}[/]")
        sys.exit(1)
