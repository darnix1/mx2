#!/usr/bin/env python3
import os
import sys
import subprocess
import requests
import json
from datetime import datetime, timedelta
import time
import re
import readline
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress
from rich.style import Style
from rich.text import Text
from rich.box import ROUNDED, DOUBLE, SQUARE
from rich.layout import Layout
from rich.align import Align

# Configurar consola Rich
console = Console()

# Estilos personalizados
class Styles:
    TITLE = Style(color="bright_white", bold=True, bgcolor="dark_blue")
    HEADER = Style(color="bright_white", bold=True, bgcolor="blue")
    OPTION = Style(color="bright_yellow", bold=True)
    HIGHLIGHT = Style(color="bright_green", bold=True)
    WARNING = Style(color="bright_red", bold=True)
    INFO = Style(color="cyan")
    SUCCESS = Style(color="bright_green")
    SYSTEM = Style(color="bright_white")
    BORDER = Style(color="dodger_blue1")

# Funciones de utilidad
def run_cmd(cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True, 
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                              text=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return ""

def get_file_content(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return f.read().strip()
    return ""

def write_file(file_path, content):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'w') as f:
        f.write(content)

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def create_menu_panel(title, content, width=None):
    """Crea un panel de menú con estilo consistente"""
    return Panel(
        content,
        title=f"[bold bright_white]{title}[/]",
        border_style="dodger_blue1",
        box=ROUNDED,
        width=width,
        padding=(0, 1),
        title_align="left"
    )

def create_info_table(info_dict, title=None):
    """Crea una tabla de información con estilo"""
    table = Table(show_header=False, box=None, padding=(0, 1))
    table.add_column(style="bright_yellow", width=12)
    table.add_column(style="bright_white")
    
    for key, value in info_dict.items():
        table.add_row(f"• {key}", value)
    
    if title:
        return create_menu_panel(title, table)
    return table

def check_service(service):
    status = run_cmd(f"systemctl is-active {service}")
    if status == "active":
        return f"[bright_green]ON[/]"
    else:
        return f"[bright_red]OFF[/]"

def count_users_ssh():
    if os.path.exists("/etc/xray/ssh"):
        with open("/etc/xray/ssh", 'r') as f:
            return len([line for line in f.readlines() if line.startswith("### ")])
    return 0

def count_users_vmess():
    if os.path.exists("/etc/xray/config.json"):
        with open("/etc/xray/config.json", 'r') as f:
            return len([line for line in f.readlines() if line.strip().startswith("#vmg ")])
    return 0

def count_users_vless():
    if os.path.exists("/etc/xray/config.json"):
        with open("/etc/xray/config.json", 'r') as f:
            return len([line for line in f.readlines() if line.strip().startswith("#vlg ")])
    return 0

def count_users_trojan():
    if os.path.exists("/etc/xray/config.json"):
        with open("/etc/xray/config.json", 'r') as f:
            return len([line for line in f.readlines() if line.strip().startswith("#trg ")])
    return 0

def get_system_info():
    info = {}
    
    # Información básica del sistema
    info['S.O'] = run_cmd("cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/\"//g' | sed 's/PRETTY_NAME//g'")
    info['Dominio'] = get_file_content("/etc/xray/domain") or "No configurado"
    info['IP Pública'] = run_cmd("curl ifconfig.me") or "No disponible"
    
    # Memoria
    mem = run_cmd("free -h | awk 'NR==2 {print $2 \" \" $3}'").split()
    info['RAM Total'] = mem[0] if len(mem) > 0 else "0"
    info['RAM Usada'] = mem[1] if len(mem) > 1 else "0"
    
    # Ubicación
    info['ISP'] = get_file_content("/etc/xray/isp") or "Desconocido"
    info['Ciudad'] = get_file_content("/etc/xray/city") or "Desconocida"
    info['Autor'] = get_file_content("/etc/profil") or "Desconocido"
    
    # Fecha y expiración
    info['Fecha'] = run_cmd("date -R | cut -d \" \" -f -5")
    today = datetime.now().strftime("%Y-%m-%d")
    
    try:
        ip_data = requests.get("https://raw.githubusercontent.com/darnix1/permission/refs/heads/main/ip").text
        for line in ip_data.split('\n'):
            if info['IP Pública'] in line:
                info['Expiración'] = line.split()[2]
                break
        else:
            info['Expiración'] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    except:
        info['Expiración'] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    
    # Estado de servicios
    info['Servicios'] = (
        f"SSHWS: {check_service('ws-stunnel')} | "
        f"XRAY: {check_service('xray')} | "
        f"NGINX: {check_service('nginx')}"
    )
    
    # Conteo de usuarios
    info['Usuarios'] = (
        f"SSH: [bright_green]{count_users_ssh()}[/] | "
        f"VMESS: [bright_green]{count_users_vmess()}[/] | "
        f"VLESS: [bright_green]{count_users_vless()}[/] | "
        f"TROJAN: [bright_green]{count_users_trojan()}[/]"
    )
    
    # Uptime
    info['Uptime'] = run_cmd("uptime -p").replace("up ", "") or "Desconocido"
    
    # Versión
    info['Versión'] = get_file_content('/opt/.ver') or "Desconocida"
    
    # Días restantes
    cert_days = (datetime.strptime(info['Expiración'], "%Y-%m-%d") - datetime.strptime(today, "%Y-%m-%d")).days
    info['Estado'] = f"[bright_green]Activo ({cert_days} días)[/]" if cert_days > 0 else f"[bright_red]Expirado[/]"
    
    return info

def show_main_menu(info):
    """Muestra el menú principal con diseño mejorado"""
    
    # Diseño de la página
    layout = Layout()
    layout.split(
        Layout(name="header", size=3),
        Layout(name="system_info", size=10),
        Layout(name="services", size=3),
        Layout(name="user_counts", size=4),
        Layout(name="menu_options", size=12),
        Layout(name="footer", size=5)
    )
    
    # Encabezado
    layout["header"].update(
        Panel.fit(
            "[bold bright_white] MENÚ PRINCIPAL - ADMINISTRACIÓN DEL SERVIDOR [/]",
            border_style="bright_blue",
            style="bold bright_white on dark_blue"
        )
    )
    
    # Información del sistema
    system_info = {
        "Sistema Operativo": info['S.O'],
        "Dominio": info['Dominio'],
        "IP Pública": info['IP Pública'],
        "RAM": f"{info['RAM Usada']} / {info['RAM Total']}",
        "Ubicación": f"{info['Ciudad']} ({info['ISP']})",
        "Autor": info['Autor'],
        "Mensaje": get_file_content('/etc/newadm/message.txt') or "Bienvenido"
    }
    layout["system_info"].update(create_info_table(system_info, "INFORMACIÓN DEL SISTEMA"))
    
    # Estado de servicios
    layout["services"].update(
        create_menu_panel(
            "ESTADO DE SERVICIOS",
            Align.center(info['Servicios'])
        )
    )
    
    # Conteo de usuarios
    user_table = Table(show_header=True, header_style="bold bright_white", box=SQUARE)
    user_table.add_column("Servicio", style="bright_white", width=10)
    user_table.add_column("Usuarios", style="bright_green", justify="center")
    
    user_table.add_row("SSH", str(count_users_ssh()))
    user_table.add_row("VMESS", str(count_users_vmess()))
    user_table.add_row("VLESS", str(count_users_vless()))
    user_table.add_row("TROJAN", str(count_users_trojan()))
    
    layout["user_counts"].update(
        create_menu_panel(
            "USUARIOS REGISTRADOS",
            Align.center(user_table)
        )
    )
    
    # Opciones del menú
    menu_table = Table.grid(padding=(1, 3), expand=True)
    menu_table.add_column(width=15)
    menu_table.add_column(width=30)
    menu_table.add_column(width=15)
    menu_table.add_column(width=30)
    
    menu_table.add_row(
        "[bright_yellow]1[/]. SSH/OpenVPN",
        "[bright_white]Administración de usuarios SSH[/]",
        "[bright_yellow]7[/]. NotiBot",
        "[bright_white]Configuración de notificaciones[/]"
    )
    menu_table.add_row(
        "[bright_yellow]2[/]. Xray/VMESS",
        "[bright_white]Configuración VMESS[/]",
        "[bright_yellow]8[/]. Temas",
        "[bright_white]Personalizar interfaz[/]"
    )
    menu_table.add_row(
        "[bright_yellow]3[/]. Xray/VLESS",
        "[bright_white]Configuración VLESS[/]",
        "[bright_yellow]9[/]. Actualizar",
        "[bright_white]Actualizar scripts[/]"
    )
    menu_table.add_row(
        "[bright_yellow]4[/]. Trojan",
        "[bright_white]Configuración Trojan[/]",
        "[bright_yellow]10[/]. Sistema",
        "[bright_white]Configuración del sistema[/]"
    )
    menu_table.add_row(
        "[bright_yellow]5[/]. Servicios",
        "[bright_white]Gestión de servicios[/]",
        "[bright_yellow]11[/]. Backup",
        "[bright_white]Copias de seguridad[/]"
    )
    menu_table.add_row(
        "[bright_yellow]6[/]. Telegram Bot",
        "[bright_white]Configuración del bot[/]",
        "[bright_yellow]12[/]. Reiniciar",
        "[bright_white]Reiniciar servicios[/]"
    )
    
    layout["menu_options"].update(
        create_menu_panel(
            "OPCIONES DEL MENÚ",
            menu_table
        )
    )
    
    # Pie de página
    footer_info = {
        "Versión": info['Versión'],
        "Expiración": f"{info['Expiración']} ({info['Estado']})",
        "Uptime": info['Uptime']
    }
    layout["footer"].update(create_info_table(footer_info, "INFORMACIÓN ADICIONAL"))
    
    # Mostrar todo el diseño
    console.print(layout)

def restart_service():
    clear_screen()
    
    console.print(
        Panel.fit(
            "[bold bright_white]REINICIO DE SERVICIOS DEL SERVIDOR[/]",
            border_style="bright_green",
            style="bold bright_white on dark_blue"
        )
    )
    
    with Progress() as progress:
        task = progress.add_task("[bright_yellow]Reiniciando servicios...[/]", total=100)
        
        services = [
            "nginx", "trojan-go", "xray", "noobzvpns", "daemon", 
            "udp-custom", "ws-dropbear", "ws-stunnel", "openvpn", 
            "cron", "netfilter-persistent", "squid", "badvpn1", 
            "badvpn2", "badvpn3", "client", "server"
        ]
        
        for i, service in enumerate(services):
            progress.update(task, advance=100/len(services), description=f"[bright_yellow]Reiniciando {service}...[/]")
            os.system(f"systemctl restart {service}")
            time.sleep(0.1)
    
    console.print("\n[bold bright_green]✓ Todos los servicios han sido reiniciados correctamente[/]\n")
    input(" Presione [Enter] para volver al menú principal ")
    menu()

def menu():
    clear_screen()
    info = get_system_info()
    show_main_menu(info)
    
    # Selección de opción
    opt = input("\n [bright_white]Seleccione una opción:[/] [bright_green]").strip()
    
    # Manejo de opciones
    if opt in ["01", "1"]:
        clear_screen()
        os.system("m-sshovpn")
    elif opt in ["02", "2"]:
        clear_screen()
        os.system("m-vmess")
    elif opt in ["03", "3"]:
        clear_screen()
        os.system("m-vless")
    elif opt in ["04", "4"]:
        clear_screen()
        os.system("m-trojan")
    elif opt in ["05", "5"]:
        clear_screen()
        os.system("running")
    elif opt in ["06", "6"]:
        clear_screen()
        os.system("m-bot")
    elif opt in ["07", "7"]:
        clear_screen()
        m_bot2()
    elif opt in ["08", "8"]:
        clear_screen()
        os.system("m-theme")
    elif opt in ["09", "9"]:
        clear_screen()
        os.system("m-update")
    elif opt == "10":
        clear_screen()
        os.system("m-system")
    elif opt == "11":
        clear_screen()
        os.system("m-backup")
    elif opt == "12":
        clear_screen()
        restart_service()
    elif opt in ["00", "0"]:
        clear_screen()
        menu()
    else:
        clear_screen()
        menu()

if __name__ == "__main__":
    # Verificar actualizaciones al inicio
    try:
        check_and_update()
    except:
        pass
    
    # Iniciar menú principal xray
    menu()
