import os
import re
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import SIMPLE
from datetime import datetime
import time

# Inicializar Rich Console
console = Console()

# Funci√≥n tim2sec (conversi√≥n de tiempo a segundos)
def tim2sec(time_str):
    parts = list(map(int, time_str.split(":")))
    seconds = 0
    for i, part in enumerate(reversed(parts)):
        seconds += part * (60 ** i)
    return seconds

# Funci√≥n convert (conversi√≥n de bytes a KB, MB, GB)
def convert(bytes):
    if bytes < 1024:
        return f"{bytes} B"
    elif bytes < 1048576:
        return f"{(bytes + 1023) // 1024} KB"
    elif bytes < 1073741824:
        return f"{(bytes + 1048575) // 1048576} MB"
    else:
        return f"{(bytes + 1073741823) // 1073741824} GB"

# Funci√≥n para leer nuevos logs
def follow_logs(log_file_path):
    with open(log_file_path, "r") as log_file:
        # Moverse al final del archivo
        log_file.seek(0, os.SEEK_END)
        while True:
            line = log_file.readline()
            if not line:
                time.sleep(0.1)  # Esperar nuevas l√≠neas
                continue
            yield line

# Funci√≥n cek_vmess (verificaci√≥n de usuarios VMESS activos)
def cek_vmess():
    # Limpiar pantalla
    os.system("clear")

    # Mostrar encabezado bonito
    console.print(Panel("[bold cyan]‚Ä¢ VMESS USER ONLINE ‚Ä¢[/bold cyan]", style="cyan", box=SIMPLE))

    # Leer usuarios VMESS del archivo de configuraci√≥n
    vm_users = []
    with open("/etc/xray/config.json", "r") as config_file:
        for line in config_file:
            match = re.search(r"^#vmg\s+(\S+)", line)
            if match:
                vm_users.append(match.group(1))

    active_users = set()
    log_generator = follow_logs("/var/log/xray/access.log")

    # Procesar nuevas l√≠neas del archivo de registro
    for line in log_generator:
        for db1 in vm_users:
            if f"email: {db1}" in line:
                parts = line.split()
                if len(parts) >= 7:
                    ina, inu, anu = parts[6], parts[1], parts[2]
                    enu = re.sub(r"tcp://", "", anu).split(".")[0:3]
                    enu = ".".join(enu)

                    now = tim2sec(datetime.now().strftime("%H:%M:%S"))
                    client = tim2sec(inu)
                    nowt = now - client

                    if nowt < 40 and (ina, enu) not in active_users:
                        active_users.add((ina, enu))

   # Crear tabla para mostrar usuarios activos con emojis y colores din√°micos
        table = Table(title="üìä USUARIOS VMESS ACTIVOS üìä", box=SIMPLE, show_lines=True)
        table.add_column("üë§ Usuario", style="cyan", justify="center", emoji=True)
        table.add_column("üåê IP Login", style="magenta", justify="center", emoji=True)
        table.add_column("üíæ Uso de Datos", style="green", justify="center", emoji=True)
        table.add_column("üîí L√≠mite", style="yellow", justify="center", emoji=True)
        
 # Mostrar informaci√≥n de usuarios activos
        if active_users:
            for vmuser in vm_users:
                vm_count = sum(1 for user in active_users if user[0] == vmuser)
                if vm_count > 0:
                    try:
                        with open(f"/etc/limit/vmess/{vmuser}", "r") as usage_file:
                            byt = int(usage_file.read().strip())
                        gb = convert(byt)

                        with open(f"/etc/vmess/{vmuser}", "r") as limit_file:
                            lim = int(limit_file.read().strip())
                        lim2 = convert(lim)

                        table.add_row(vmuser, str(vm_count), gb, lim2)
                    except FileNotFoundError:
                        pass

            # Imprimir la tabla
            console.print(table)
        else:
            console.print("[bold red]No hay usuarios VMESS activos.[/bold red]")

        # Limpia la pantalla antes de la pr√≥xima actualizaci√≥n
        time.sleep(2)
        os.system("clear")

# Ejecuci√≥n continua en tiempo real
if __name__ == "__main__":
    try:
        cek_vmess()
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Deteniendo el monitoreo...[/bold yellow]")
