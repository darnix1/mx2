#!/usr/bin/env python3
import os
import sys
import subprocess
import requests
import time
from datetime import datetime, timedelta
from rich.console import Console

console = Console()

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def run_cmd(cmd):
    try:
        return subprocess.run(cmd, shell=True, check=True,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                            text=True).stdout.strip()
    except subprocess.CalledProcessError:
        return ""

def get_file_content(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return f.read().strip()
    return ""

def get_system_info():
    info = {}
    
    # Información básica
    info['os'] = run_cmd("cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '\"'")
    info['domain'] = get_file_content("/etc/xray/domain") or "No configurado"
    info['ip'] = run_cmd("curl -s ifconfig.me") or "No disponible"
    
    # Memoria
    mem = run_cmd("free -h | awk 'NR==2 {print $2 \" \" $3}'").split()
    info['ram_total'] = mem[0] if len(mem) > 0 else "0"
    info['ram_used'] = mem[1] if len(mem) > 1 else "0"
    
    # Ubicación
    info['isp'] = get_file_content("/etc/xray/isp") or "Desconocido"
    info['city'] = get_file_content("/etc/xray/city") or "Desconocida"
    info['author'] = get_file_content("/etc/profil") or "Desconocido"
    
    # Estado de servicios
    info['ssh_status'] = "ON" if run_cmd("systemctl is-active ws-stunnel") == "active" else "OFF"
    info['xray_status'] = "ON" if run_cmd("systemctl is-active xray") == "active" else "OFF"
    info['nginx_status'] = "ON" if run_cmd("systemctl is-active nginx") == "active" else "OFF"
    
    # Conteo de usuarios
    def count_users(pattern, file):
        if os.path.exists(file):
            with open(file, 'r') as f:
                return len([line for line in f.readlines() if line.startswith(pattern)])
        return 0
    
    info['ssh_users'] = count_users("### ", "/etc/xray/ssh")
    info['vmess_users'] = count_users("#vmg ", "/etc/xray/config.json")
    info['vless_users'] = count_users("#vlg ", "/etc/xray/config.json")
    info['trojan_users'] = count_users("#trg ", "/etc/xray/config.json")
    
    return info

def show_menu():
    info = get_system_info()
    clear_screen()
    
    # Encabezado
    console.print("[bold]MENU AUTO[/]\n")
    
    # Información del sistema
    console.print(f"S.O\n{info['os']} .\n")
    console.print(f"DOMINIO\n{info['domain']} .\n")
    console.print(f"RAM USADO\n{info['ram_total']} / {info['ram_used']} MB .\n")
    console.print(f"AUTOR\n{info['author']}\n")
    
    # Separador
    console.print("─" * 40 + "\n")
    
    # Estado de servicios
    console.print("[bold]SERVICIOS[/]")
    console.print(f"[ SSHWS : {info['ssh_status']} ] [ XRAY : {info['xray_status']} ] [ NGINX : {info['nginx_status']} ]\n")
    
    # Control de registro
    console.print("CONTROL DE REGISTRO")
    console.print(f"SSHWS:[{info['ssh_users']}] VMESS:[{info['vmess_users']}] VLESS:[{info['vless_users']}] TROJAN:[{info['trojan_users']}]\n")
    
    # Separador
    console.print("─" * 40 + "\n")
    
    # Opciones del menú
    console.print("[1] • SSH OPENVPN    [7] • NOTIBOT")
    console.print("[2] • XRAY/VMESS    [8] • TEMAS")
    console.print("[3] • XRAY/VLESS    [9] • UPDATE")
    console.print("[4] • TROJAN    [10] • SISTEMA")
    console.print("[5] • SERVICIOS    [11] • BACKUP")
    console.print("[6] • TELEGRAM BOT    [12] • REINICIAR\n")

    # Input
    try:
        opt = input("Seleccione una opción (1-12): ").strip()
        
        option_actions = {
            '1': "m-sshovpn", '01': "m-sshovpn",
            '2': "m-vmess", '02': "m-vmess",
            '3': "m-vless", '03': "m-vless",
            '4': "m-trojan", '04': "m-trojan",
            '5': "running", '05': "running",
            '6': "m-bot", '06': "m-bot",
            '7': "m-bot2", '07': "m-bot2",
            '8': "m-theme", '08': "m-theme",
            '9': "m-update", '09': "m-update",
            '10': "m-system",
            '11': "m-backup",
            '12': "m-restart"
        }
        
        if opt in option_actions:
            os.system(option_actions[opt])
        else:
            console.print("\n[red]Opción no válida[/]")
            time.sleep(1)
            show_menu()
            
    except KeyboardInterrupt:
        console.print("\n[red]Saliendo...[/]")
        sys.exit(0)

if __name__ == "__main__":
    try:
        while True:
            show_menu()
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/]")
        sys.exit(1)
