#!/usr/bin/env python3
import os
import sys
import subprocess
import time
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
from rich.box import SQUARE

# Configurar consola Rich
console = Console()

# Estilos
STYLE_TITLE = "bold white on blue"
STYLE_HEADER = "bold bright_white"
STYLE_OPTION = "bold bright_yellow"
STYLE_VALUE = "bright_white"
STYLE_ON = "bold bright_green"
STYLE_OFF = "bold bright_red"
STYLE_COUNT = "bold bright_cyan"
STYLE_BORDER = "bright_blue"

def clear_screen():
    """Limpia la pantalla de la terminal"""
    os.system('clear' if os.name == 'posix' else 'cls')

def run_cmd(cmd):
    """Ejecuta un comando de shell y devuelve el resultado"""
    try:
        return subprocess.run(
            cmd, 
            shell=True, 
            check=True, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        ).stdout.strip()
    except subprocess.CalledProcessError:
        return ""

def get_system_info():
    """Obtiene información del sistema"""
    info = {}
    
    # Información básica
    info['os'] = run_cmd("cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '\"'")
    info['domain'] = run_cmd("cat /etc/xray/domain 2>/dev/null") or "No configurado"
    info['ip'] = run_cmd("curl -s ifconfig.me") or "No disponible"
    
    # Memoria RAM
    mem = run_cmd("free -m | awk 'NR==2 {print $2 \" \" $3}'").split()
    info['ram_total'] = f"{int(mem[0])}MB" if len(mem) > 0 else "0MB"
    info['ram_used'] = f"{int(mem[1])}MB" if len(mem) > 1 else "0MB"
    
    # Estado de servicios
    def is_service_active(service):
        return run_cmd(f"systemctl is-active {service}") == "active"
    
    info['ssh_status'] = is_service_active("ws-stunnel")
    info['xray_status'] = is_service_active("xray")
    info['nginx_status'] = is_service_active("nginx")
    
    # Conteo de usuarios
    def count_users(pattern, file):
        try:
            if os.path.exists(file):
                with open(file, 'r') as f:
                    return sum(1 for line in f if line.startswith(pattern))
            return 0
        except:
            return 0
    
    info['ssh_users'] = count_users("### ", "/etc/xray/ssh")
    info['vmess_users'] = count_users("#vmg ", "/etc/xray/config.json")
    info['vless_users'] = count_users("#vlg ", "/etc/xray/config.json")
    info['trojan_users'] = count_users("#trg ", "/etc/xray/config.json")
    
    return info

def show_main_menu():
    """Muestra el menú principal con el formato solicitado"""
    clear_screen()
    info = get_system_info()
    
    # Panel de título
    console.print(Panel.fit(
        " MENÚ PRINCIPAL ",
        style=STYLE_TITLE
    ))
    
    # Información del sistema
    sys_info = Table.grid(padding=(0, 2))
    sys_info.add_column(style=STYLE_HEADER, width=18)
    sys_info.add_column(style=STYLE_VALUE)
    
    sys_info.add_row("Sistema Operativo", info['os'])
    sys_info.add_row("Dominio", info['domain'])
    sys_info.add_row("IP Pública", info['ip'])
    
    console.print(sys_info)
    console.print()
    
    # Estado de servicios en una línea
    services_line = (
        f"  [ SSHWS : [{STYLE_ON if info['ssh_status'] else STYLE_OFF}]{'ON' if info['ssh_status'] else 'OFF'}[/] ] "
        f"[ XRAY : [{STYLE_ON if info['xray_status'] else STYLE_OFF}]{'ON' if info['xray_status'] else 'OFF'}[/] ] "
        f"[ NGINX : [{STYLE_ON if info['nginx_status'] else STYLE_OFF}]{'ON' if info['nginx_status'] else 'OFF'}[/] ]"
    )
    console.print(services_line)
    
    # Control de registro
    console.print("\n══════════════  CONTROL DE REGISTRO  ══════════════")
    
    # Usuarios en una línea
    users_line = (
        f"  SSHWS:[{STYLE_COUNT}]{info['ssh_users']}[/]  "
        f"VMESS:[{STYLE_COUNT}]{info['vmess_users']}[/]  "
        f"VLESS:[{STYLE_COUNT}]{info['vless_users']}[/]  "
        f"TROJAN:[{STYLE_COUNT}]{info['trojan_users']}[/]"
    )
    console.print(users_line)
    console.print("═══════════════════════════════════════════════════")
    console.print("═══════════════════════════════════════════════════")
    
    # Opciones del menú
    menu_table = Table.grid(padding=(0, 4))
    menu_table.add_column(width=25)
    menu_table.add_column(width=25)
    
    menu_table.add_row(
        f"[{STYLE_OPTION}]1[/] • SSH OPENVPN",
        f"[{STYLE_OPTION}]7[/] • NOTIBOT"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]2[/] • XRAY/VMESS",
        f"[{STYLE_OPTION}]8[/] • TEMAS"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]3[/] • XRAY/VLESS",
        f"[{STYLE_OPTION}]9[/] • UPDATE"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]4[/] • TROJAN",
        f"[{STYLE_OPTION}]10[/] • SISTEMA"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]5[/] • SERVICIOS",
        f"[{STYLE_OPTION}]11[/] • BACKUP"
    )
    menu_table.add_row(
        f"[{STYLE_OPTION}]6[/] • TELEGRAM BOT",
        f"[{STYLE_OPTION}]12[/] • REINICIAR"
    )
    
    console.print(menu_table)
    console.print()
    
    # Input para selección
    try:
        opt = console.input("[bright_white]Seleccione una opción (1-12): [/][bright_green]").strip()
        
        # Mapeo de opciones
        option_actions = {
            '1': "m-sshovpn", '01': "m-sshovpn",
            '2': "m-vmess", '02': "m-vmess",
            '3': "m-vless", '03': "m-vless",
            '4': "m-trojan", '04': "m-trojan",
            '5': "running", '05': "running",
            '6': "m-bot", '06': "m-bot",
            '7': "m-bot2", '07': "m-bot2",
            '8': "m-theme", '08': "m-theme",
            '9': "m-update", '09': "m-update",
            '10': "m-system",
            '11': "m-backup",
            '12': "m-restart"
        }
        
        if opt in option_actions:
            os.system(option_actions[opt])
        else:
            console.print("[bright_red]Opción no válida. Intente nuevamente.[/]")
            time.sleep(1)
            show_main_menu()
            
    except KeyboardInterrupt:
        console.print("\n[bright_red]Saliendo del menú...[/]")
        sys.exit(0)

if __name__ == "__main__":
    try:
        while True:
            show_main_menu()
    except Exception as e:
        console.print(f"[bright_red]Error: {str(e)}[/]")
        sys.exit(1)
