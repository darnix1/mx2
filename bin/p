#!/usr/bin/env python3
import os
import sys
import subprocess
import requests
import json
from datetime import datetime, timedelta
import time
import re
import readline
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress
from rich.style import Style
from rich.text import Text
from rich.box import SIMPLE_HEAVY

# Configurar consola Rich
console = Console()

# Configuración de colores
class Colors:
    RED = "red"
    GREEN = "green"
    YELLOW = "yellow"
    BLUE = "blue"
    WHITE = "white"
    CYAN = "cyan"
    COLOR1 = "bright_green"  # Verde brillante
    COLBG1 = "on bright_green"  # Fondo verde brillante

# Funciones de utilidad
def run_cmd(cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True, 
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                              text=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return ""

def get_file_content(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return f.read().strip()
    return ""

def write_file(file_path, content):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'w') as f:
        f.write(content)

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def check_service(service):
    status = run_cmd(f"systemctl is-active {service}")
    if status == "active":
        return f"[{Colors.COLOR1}]ON[/]"
    else:
        return f"[{Colors.RED}]OFF[/]"

def count_users_ssh():
    if os.path.exists("/etc/xray/ssh"):
        with open("/etc/xray/ssh", 'r') as f:
            return len([line for line in f.readlines() if line.startswith("### ")])
    return 0

def count_users_vmess():
    if os.path.exists("/etc/xray/config.json"):
        with open("/etc/xray/config.json", 'r') as f:
            return len([line for line in f.readlines() if line.strip().startswith("#vmg ")])
    return 0

def count_users_vless():
    if os.path.exists("/etc/xray/config.json"):
        with open("/etc/xray/config.json", 'r') as f:
            return len([line for line in f.readlines() if line.strip().startswith("#vlg ")])
    return 0

def count_users_trojan():
    if os.path.exists("/etc/xray/config.json"):
        with open("/etc/xray/config.json", 'r') as f:
            return len([line for line in f.readlines() if line.strip().startswith("#trg ")])
    return 0

def count_users_noobz():
    if os.path.exists("/etc/xray/noob"):
        with open("/etc/xray/noob", 'r') as f:
            return len([line for line in f.readlines() if line.startswith("### ")])
    return 0

def count_users_trojan_go():
    if os.path.exists("/etc/trojan-go/trgo"):
        with open("/etc/trojan-go/trgo", 'r') as f:
            return len([line for line in f.readlines() if line.startswith("### ")])
    return 0

def get_system_info():
    info = {}
    
    # Información básica del sistema
    info['model'] = run_cmd("cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/\"//g' | sed 's/PRETTY_NAME//g'")
    info['domain'] = get_file_content("/etc/xray/domain")
    info['myip'] = run_cmd("curl ifconfig.me")
    
    # Memoria
    mem = run_cmd("free -h | awk 'NR==2 {print $2 \" \" $3}'").split()
    info['tram'] = mem[0] if len(mem) > 0 else "0"
    info['uram'] = mem[1] if len(mem) > 1 else "0"
    
    # Ubicación
    info['isp'] = get_file_content("/etc/xray/isp")
    info['city'] = get_file_content("/etc/xray/city")
    info['author'] = get_file_content("/etc/profil")
    
    # Fecha y expiración
    info['date'] = run_cmd("date -R | cut -d \" \" -f -5")
    info['today'] = datetime.now().strftime("%Y-%m-%d")
    
    try:
        ip_data = requests.get("https://raw.githubusercontent.com/darnix1/permission/refs/heads/main/ip").text
        for line in ip_data.split('\n'):
            if info['myip'] in line:
                info['exp2'] = line.split()[2]
                break
        else:
            info['exp2'] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    except:
        info['exp2'] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    
    # Estado de servicios
    info['services'] = {
        'xray': check_service("xray"),
        'nginx': check_service("nginx"),
        'ws-stunnel': check_service("ws-stunnel"),
        'noobzvpns': check_service("noobzvpns"),
        'dropbear': check_service("dropbear"),
        'udp-custom': check_service("udp-custom"),
        'trojan-go': check_service("trojan-go")
    }
    
    # Conteo de usuarios
    info['user_counts'] = {
        'ssh': count_users_ssh(),
        'vmess': count_users_vmess(),
        'vless': count_users_vless(),
        'trojan': count_users_trojan(),
        'noobz': count_users_noobz(),
        'trojan_go': count_users_trojan_go()
    }
    
    # Uptime
    uptime = run_cmd("uptime -p").replace("up ", "")
    info['uptime'] = uptime
    
    return info

def show_update_panel(commit_message):
    console.print(Panel.fit(
        f"[bold white]• UPDATE SCRIPT AVAILABLE •[/]\n\n"
        f"[white]Repository: jvoscript/autoscript-vip[/]\n"
        f"[white]Latest Changes:[/]\n"
        f"1. {commit_message}",
        title="[bold yellow]UPDATE AVAILABLE[/]",
        border_style="cyan",
        padding=(1, 2)
    ))

def check_and_update():
    try:
        # Obtener último commit de GitHub
        response = requests.get("https://api.github.com/repos/darnix1/Premium/commits/main")
        if response.status_code == 200:
            data = response.json()
            latest_commit = data.get('sha', '')
            commit_message = data.get('commit', {}).get('message', '')
            
            # Obtener último commit guardado
            last_commit = ""
            last_update_time = "Never"
            if os.path.exists("/etc/github/last_commit"):
                with open("/etc/github/last_commit", 'r') as f:
                    lines = f.readlines()
                    if lines:
                        last_commit = lines[0].split()[0] if len(lines[0].split()) > 0 else ""
                        last_update_time = " ".join(lines[0].split()[1:3]) if len(lines[0].split()) > 2 else "Never"
            
            # Verificar si hay actualizaciones
            if latest_commit != last_commit:
                show_update_panel(commit_message)
                console.print(f"Last update: {last_update_time}")
                
                update_choice = input("Do you want to update the script? (Y/N): ").strip().lower()
                if update_choice == 'y':
                    with Progress() as progress:
                        task = progress.add_task("[cyan]Updating script...", total=100)
                        for i in range(100):
                            time.sleep(0.02)
                            progress.update(task, advance=1)
                    
                    os.system("wget -q https://raw.githubusercontent.com/darnix1/mx2/refs/heads/main/menu/m-update.sh -O m-update.sh")
                    os.system("chmod +x m-update.sh && ./m-update.sh")
                    
                    update_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    write_file("/etc/github/last_commit", f"{latest_commit} {update_time}")
                    console.print(f"[green]Actualización completada {update_time}.[/]")
                else:
                    console.print("[yellow]Update skipped.[/]")
    except Exception as e:
        console.print(f"[red]Error checking updates: {str(e)}[/]")

def m_bot2():
    clear_screen()
    
    table = Table(
        title="[bold bright_green]Please select a Bot type below[/]",
        box=SIMPLE_HEAVY,
        border_style="bright_green",
        header_style="bold white",
        title_style="bold bright_green"
    )
    
    table.add_column("Option", style="bright_green", width=10)
    table.add_column("Description", style="white")
    
    table.add_row("1", "Buat/Edit BOT INFO Multi Login SSH, XRAY & TRANSAKSI")
    table.add_row("2", "Buat/Edit BOT INFO Create User & Lain Lain")
    table.add_row("3", "Buat/Edit BOT INFO Backup Telegram")
    
    console.print(table)
    
    bot = input("   Please select numbers 1-3 or Any Button(Random) to exit : ").strip()
    print("")
    
    if bot == "1":
        clear_screen()
        os.system("rm -rf /etc/perlogin")
        os.system("mkdir -p /etc/perlogin")
        os.chdir("/etc/perlogin")
        os.system("touch token")
        os.system("touch id")
        
        console.print("[bold bright_green][ INFO ][/] [white]Create for database Multi Login[/]")
        token2 = input("Enter Token (Creat on @BotFather) : ").strip()
        write_file("/etc/perlogin/token", token2)
        idat = input("Enter Your Id (Creat on @userinfobot)  : ").strip()
        write_file("/etc/perlogin/id", idat)
        time.sleep(1)
        m_bot2()
    elif bot == "2":
        clear_screen()
        os.system("rm -rf /etc/per")
        os.system("mkdir -p /etc/per")
        os.chdir("/etc/per")
        os.system("touch token")
        os.system("touch id")
        
        console.print("[bold bright_green][ INFO ][/] [white]Create for database Akun Dan Lain Lain[/]")
        token3 = input("Enter Token (Creat on @BotFather) : ").strip()
        write_file("/etc/per/token", token3)
        idat2 = input("Enter Your Id (Creat on @userinfobot)  : ").strip()
        write_file("/etc/per/id", idat2)
        time.sleep(1)
        m_bot2()
    elif bot == "3":
        clear_screen()
        os.system("rm -rf /usr/bin/token")
        os.system("rm -rf /usr/bin/idchat")
        
        console.print("[bold bright_green][ INFO ][/] [white]Create for database Backup Telegram[/]")
        token23 = input("Enter Token (Creat on @BotFather) : ").strip()
        write_file("/usr/bin/token", token23)
        idchat = input("Enter Your Id (Creat on @userinfobot)  : ").strip()
        write_file("/usr/bin/idchat", idchat)
        time.sleep(1)
        m_bot2()
    else:
        menu()

def restart_service():
    clear_screen()
    
    # Panel de título
    console.print(Panel.fit(
        "[bold white]RESTART SERVICE VPS[/]",
        border_style="bright_green",
        style="bold white"
    ))
    
    # Barra de progreso simulada
    with Progress() as progress:
        task = progress.add_task("[yellow]Please Wait Loading[/]", total=100)
        for i in range(100):
            time.sleep(0.03)
            progress.update(task, advance=1)
    
    console.print("[bold red] Restart All Service... [/]")
    
    # Reiniciar servicios
    services = [
        "nginx", "trojan-go", "xray", "noobzvpns", "daemon", 
        "udp-custom", "ws-dropbear", "ws-stunnel", "openvpn", 
        "cron", "netfilter-persistent", "squid", "badvpn1", 
        "badvpn2", "badvpn3", "client", "server"
    ]
    
    for service in services:
        os.system(f"systemctl restart {service}")
    
    console.print("\n[green]All services have been restarted successfully![/]")
    input("\nPress [Enter] to back on menu")
    menu()

def menu():
    clear_screen()
    info = get_system_info()
    
    # Panel de título
    console.print(Panel.fit(
        "[bold white] MENU AUTO [/]",
        border_style="cyan",
        style="bold white"
    ))
    
    # Información del sistema
    sys_info = Table.grid(padding=(0, 2))
    sys_info.add_column(style="white")
    sys_info.add_column(style="green")
    
    sys_info.add_row("• S.O", info['model'])
    sys_info.add_row("• DOMINIO", info['domain'])
    sys_info.add_row("• RAM USADO", f"{info['tram']} / {info['uram']} MB")
    sys_info.add_row("• AUTOR", info['author'])
    sys_info.add_row("• Message", get_file_content('/etc/newadm/message.txt'))
    
    console.print(sys_info)
    
    # Estado de servicios
    services_table = Table.grid(padding=(0, 1))
    services_table.add_row(
        f"[white][ SSHWS : {info['services']['ws-stunnel']} [/]",
        f"[white][ XRAY : {info['services']['xray']} [/]",
        f"[white][ NGINX : {info['services']['nginx']} [/]"
    )
    console.print(services_table)
    
    # Conteo de usuarios
    user_counts = Table(
        title="[bold cyan]CONTROL DE REGISTRO[/]",
        box=SIMPLE_HEAVY,
        border_style="cyan",
        show_header=False
    )
    
    user_counts.add_column("Service", style="white")
    user_counts.add_column("Count", style="yellow")
    
    user_counts.add_row(
        "SSHWS", f"[green]{info['user_counts']['ssh']}[/]"
    )
    user_counts.add_row(
        "VMESS", f"[green]{info['user_counts']['vmess']}[/]"
    )
    user_counts.add_row(
        "VLESS", f"[green]{info['user_counts']['vless']}[/]"
    )
    user_counts.add_row(
        "TROJAN", f"[green]{info['user_counts']['trojan']}[/]"
    )
    
    console.print(user_counts)
    
    # Opciones del menú
    menu_options = Table.grid(padding=(0, 2))
    menu_options.add_column(style="yellow", width=5)
    menu_options.add_column(style="white", width=40)
    menu_options.add_column(style="yellow", width=5)
    menu_options.add_column(style="white", width=40)
    
    menu_options.add_row(
        "[bold yellow]1[/]", "SSH OPENVPN",
        "[bold yellow]7[/]", "NOTIBOT"
    )
    menu_options.add_row(
        "[bold yellow]2[/]", "XRAY/VMESS",
        "[bold yellow]8[/]", "TEMAS"
    )
    menu_options.add_row(
        "[bold yellow]3[/]", "XRAY/VLESS",
        "[bold yellow]9[/]", "UPDATE"
    )
    menu_options.add_row(
        "[bold yellow]4[/]", "TROJAN",
        "[bold yellow]10[/]", "SISTEMA"
    )
    menu_options.add_row(
        "[bold yellow]5[/]", "SERVICIOS",
        "[bold yellow]11[/]", "BACKUP"
    )
    menu_options.add_row(
        "[bold yellow]6[/]", "TELEGRAM BOT",
        "[bold yellow]12[/]", "REINICIAR"
    )
    
    console.print(menu_options)
    
    # Información de versión y expiración
    cert_days = (datetime.strptime(info['exp2'], "%Y-%m-%d") - datetime.strptime(info['today'], "%Y-%m-%d")).days
    sts = f"[green](Registered)[/]" if cert_days > 0 else f"[red][EXPIRED][/]"
    
    version_info = Table.grid(padding=(0, 2))
    version_info.add_column(style="white", width=12)
    version_info.add_column(style="white")
    
    version_info.add_row("• Versi", f"{get_file_content('/opt/.ver')} Version")
    version_info.add_row("• Client", info['author'])
    version_info.add_row("• Durasi", f"{cert_days} hari")
    version_info.add_row("• Expiry", f"{info['exp2']} {sts}")
    
    console.print(Panel.fit(
        version_info,
        border_style="bright_green",
        title="[bold white]SYSTEM INFO[/]"
    ))
    
    # Selección de opción
    opt = input(f" [white]Selecciona una opcion[/] [bright_green]:[/] [white]").strip()
    
    # Manejo de opciones
    if opt in ["01", "1"]:
        clear_screen()
        os.system("m-sshovpn")
    elif opt in ["02", "2"]:
        clear_screen()
        os.system("m-vmess")
    elif opt in ["03", "3"]:
        clear_screen()
        os.system("m-vless")
    elif opt in ["04", "4"]:
        clear_screen()
        os.system("m-trojan")
    elif opt in ["05", "5"]:
        clear_screen()
        os.system("running")
    elif opt in ["06", "6"]:
        clear_screen()
        os.system("m-bot")
    elif opt in ["07", "7"]:
        clear_screen()
        m_bot2()
    elif opt in ["08", "8"]:
        clear_screen()
        os.system("m-theme")
    elif opt in ["09", "9"]:
        clear_screen()
        os.system("m-update")
    elif opt == "10":
        clear_screen()
        os.system("m-system")
    elif opt == "11":
        clear_screen()
        os.system("m-backup")
    elif opt == "12":
        clear_screen()
        restart_service()
    elif opt in ["00", "0"]:
        clear_screen()
        menu()
    else:
        clear_screen()
        menu()

if __name__ == "__main__":
    # Verificar actualizaciones al inicio
    check_and_update()
    
    # Iniciar menú principal
    menu()
