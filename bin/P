import os
import re
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import SIMPLE
from datetime import datetime
import time

# Inicializar Rich Console
console = Console()

# Función tim2sec (conversión de tiempo a segundos)
def tim2sec(time_str):
    parts = list(map(int, time_str.split(":")))
    seconds = 0
    for i, part in enumerate(reversed(parts)):
        seconds += part * (60 ** i)
    return seconds

# Función convert (conversión de bytes a KB, MB, GB)
def convert(bytes):
    if bytes < 1024:
        return f"{bytes} B"
    elif bytes < 1048576:
        return f"{(bytes + 1023) // 1024} KB"
    elif bytes < 1073741824:
        return f"{(bytes + 1048575) // 1048576} MB"
    else:
        return f"{(bytes + 1073741823) // 1073741824} GB"

# Función para seguir nuevas líneas del archivo de registro
def follow_logs(log_file_path):
    # Obtener las últimas 100 líneas del archivo al inicio
    try:
        initial_lines = subprocess.check_output(["tail", "-n", "100", log_file_path]).decode().splitlines()
        for line in initial_lines:
            yield line
    except FileNotFoundError:
        console.print("[bold red]🚨 Archivo de registro no encontrado.[/bold red]")
        return

    # Seguir nuevas líneas agregadas al archivo
    with open(log_file_path, "r") as log_file:
        log_file.seek(0, os.SEEK_END)  # Moverse al final del archivo
        while True:
            line = log_file.readline()
            if not line:
                time.sleep(0.1)  # Esperar nuevas líneas
                continue
            yield line

# Función para animar una barra deslizante
def animate_bar():
    bar_length = 40  # Longitud de la barra
    direction = 1    # Dirección: 1 (derecha), -1 (izquierda)
    position = 0     # Posición inicial de la barra

    while True:
        # Crear la barra con emoji 🟩 en movimiento
        bar = "⬛" * position + "🟩" + "⬛" * (bar_length - position - 1)
        console.print(f"[bold green]{bar}[/bold green]", end="\r")

        # Actualizar posición
        position += direction
        if position == 0 or position == bar_length - 1:
            direction *= -1  # Cambiar dirección

        time.sleep(0.05)  # Velocidad de la animación

# Función cek_vmess (verificación de usuarios VMESS activos)
def cek_vmess():
    # Limpiar pantalla
    os.system("clear")

    # Mostrar encabezado bonito con emojis
    console.print(Panel("[bold cyan]🚀 • MONITOR DE USUARIOS VMESS • 🚀[/bold cyan]", style="cyan", box=SIMPLE))

    # Leer usuarios VMESS del archivo de configuración
    vm_users = []
    try:
        with open("/etc/xray/config.json", "r") as config_file:
            for line in config_file:
                match = re.search(r"^#vmg\s+(\S+)", line)
                if match:
                    vm_users.append(match.group(1))
    except FileNotFoundError:
        console.print("[bold red]🚨 Archivo de configuración no encontrado.[/bold red]")
        return

    active_users = set()
    log_generator = follow_logs("/var/log/xray/access.log")

    # Procesar nuevas líneas del archivo de registro
    for line in log_generator:
        for db1 in vm_users:
            if f"email: {db1}" in line:
                parts = line.split()
                if len(parts) >= 7:
                    ina, inu, anu = parts[6], parts[1], parts[2]
                    enu = re.sub(r"tcp://", "", anu).split(".")[0:3]
                    enu = ".".join(enu)

                    now = tim2sec(datetime.now().strftime("%H:%M:%S"))
                    client = tim2sec(inu)
                    nowt = now - client

                    if nowt < 40 and (ina, enu) not in active_users:
                        active_users.add((ina, enu))

        # Crear tabla para mostrar usuarios activos con emojis y colores dinámicos
        table = Table(title="📊 USUARIOS VMESS ACTIVOS 📊", box=SIMPLE, show_lines=True)
        table.add_column("👤 Usuario", style="cyan", justify="center", emoji=True)
        table.add_column("🌐 IP Login", style="magenta", justify="center", emoji=True)
        table.add_column("💾 Uso de Datos", style="green", justify="center", emoji=True)
        table.add_column("🔒 Límite", style="yellow", justify="center", emoji=True)

        # Mostrar información de usuarios activos
        if active_users:
            for vmuser in vm_users:
                vm_count = sum(1 for user in active_users if user[0] == vmuser)
                if vm_count > 0:
                    try:
                        with open(f"/etc/limit/vmess/{vmuser}", "r") as usage_file:
                            byt = int(usage_file.read().strip())
                        gb = convert(byt)

                        with open(f"/etc/vmess/{vmuser}", "r") as limit_file:
                            lim = int(limit_file.read().strip())
                        lim2 = convert(lim)

                        table.add_row(vmuser, str(vm_count), f"{gb} 📂", f"{lim2} 🔒")
                    except FileNotFoundError:
                        pass

            # Imprimir la tabla
            console.print(table)
        else:
            console.print("[bold red]🚨 No hay usuarios VMESS activos.[/bold red]")

        # Animación de barra deslizante
        console.print("\n[bold green]🔄 Actualizando datos...[/bold green]")
        animate_bar()

        # Limpia la pantalla antes de la próxima actualización
        time.sleep(5)
        os.system("clear")

# Ejecución continua en tiempo real
if __name__ == "__main__":
    try:
        cek_vmess()
    except KeyboardInterrupt:
        console.print("\n[bold yellow]👋 Deteniendo el monitoreo... ¡Hasta luego! 👋[/bold yellow]")
